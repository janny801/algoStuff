//quarter duplicate values rhythm code 
//switched to misra strat instead of quickselect (in comparison to corresponding c++ program )


fun quarterDuplicateValues(inputArray) {
    var arraySize = len(inputArray);
    if (arraySize == 0) return false;

    // ----- Pass 1: find up to 3 candidate values -----
    var candidateValue1 = 0; var candidateCount1 = 0;
    var candidateValue2 = 0; var candidateCount2 = 0;
    var candidateValue3 = 0; var candidateCount3 = 0;

    for (var index = 0; index < arraySize; index = index + 1) {
        var currentValue = inputArray[index];

        if (candidateCount1 > 0 and currentValue == candidateValue1) {
            candidateCount1 = candidateCount1 + 1;
        } else if (candidateCount2 > 0 and currentValue == candidateValue2) {
            candidateCount2 = candidateCount2 + 1;
        } else if (candidateCount3 > 0 and currentValue == candidateValue3) {
            candidateCount3 = candidateCount3 + 1;
        } else if (candidateCount1 == 0) {
            candidateValue1 = currentValue; candidateCount1 = 1;
        } else if (candidateCount2 == 0) {
            candidateValue2 = currentValue; candidateCount2 = 1;
        } else if (candidateCount3 == 0) {
            candidateValue3 = currentValue; candidateCount3 = 1;
        } else {
            // decrement all three counters
            candidateCount1 = candidateCount1 - 1;
            candidateCount2 = candidateCount2 - 1;
            candidateCount3 = candidateCount3 - 1;
        }
    }

    // ----- Pass 2: verify actual counts of the survivors -----
    var threshold = arraySize / 4;  // strictly greater than n/4
    var count1 = 0; var count2 = 0; var count3 = 0;

    for (var index2 = 0; index2 < arraySize; index2 = index2 + 1) {
        var valueToCheck = inputArray[index2];
        if (candidateCount1 > 0 and valueToCheck == candidateValue1) {
            count1 = count1 + 1; if (count1 > threshold) return true;
        } else if (candidateCount2 > 0 and valueToCheck == candidateValue2) {
            count2 = count2 + 1; if (count2 > threshold) return true;
        } else if (candidateCount3 > 0 and valueToCheck == candidateValue3) {
            count3 = count3 + 1; if (count3 > threshold) return true;
        }
    }

    return false;
}


fun main() {
    var sampleInput = [5,5,6,6,7,7,8,8];

  // run the algorithm
    var result = quarterDuplicateValues(sampleInput);

    // print the array (one line)
    printf("Input: [");
    for (var i = 0; i < len(sampleInput); i = i + 1) {
        printf("%d", sampleInput[i]);   // print int
        if (i < len(sampleInput) - 1) {
            printf(", ");               // still on same line
        }
    }
    printf("]\n");  // close array + newline

    // print the result on the next line
    if (result) {
        print "true";
    } else {
        print "false";
    }
}
main();