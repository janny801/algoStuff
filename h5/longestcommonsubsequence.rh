//longest common subsequence length 

fun lcs(array1, array2) {
    // get lens of array 
    var len1 = len(array1);
    var len2 = len(array2);
    
    // create 2d table (initialized with 0)
    var lcstable = [];
    for (var i = 0; i < len1 + 1; i = i + 1) {
        var row = [];
        for (var j = 0; j < len2 + 1; j = j + 1) {
            push(row, 0);
        }
        push(lcstable, row);
    }
    
    // fill table up in bottom up manner
    for (var i = 1; i < len1 + 1; i = i + 1) {
        for (var j = 1; j < len2 + 1; j = j + 1) {
            if (array1[i - 1] == array2[j - 1]) {
                // case 1: chars match (extend lcs)
                lcstable[i][j] = lcstable[i - 1][j - 1] + 1;
            } else {
                // case 2: chars dont match; take best so far 
                if (lcstable[i - 1][j] > lcstable[i][j - 1]) {
                    lcstable[i][j] = lcstable[i - 1][j];
                } else {
                    lcstable[i][j] = lcstable[i][j - 1];
                }
                // ie ) skipping one of these would give us a better result 
                // input the better result
            }
        }
    }

    // result is stored in bottom right cell 
    return lcstable[len1][len2];
}


// main func 
var array1 = [1, 3, 4, 1, 2, 3];
var array2 = [3, 4, 1, 2, 1, 3];

// compute lcs length (call func)
var lcslen = lcs(array1, array2);

print(lcslen);
