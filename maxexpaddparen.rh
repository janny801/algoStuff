// Maximum expression by adding parentheses (Dynamic Programming)

fun str_to_int(num_arr)
{
    var total = 0;
    var neg = false;
    var i = 0;

    if(len(num_arr) > 0 and num_arr[0] == "-")
    {
        neg = true;
        i = 1;
    }

    while(i < len(num_arr))
    {
        var ch = num_arr[i];
        var digit = 0;

        if(ch == "0") digit = 0;
        if(ch == "1") digit = 1;
        if(ch == "2") digit = 2;
        if(ch == "3") digit = 3;
        if(ch == "4") digit = 4;
        if(ch == "5") digit = 5;
        if(ch == "6") digit = 6;
        if(ch == "7") digit = 7;
        if(ch == "8") digit = 8;
        if(ch == "9") digit = 9;

        total = total * 10 + digit;
        i = i + 1;
    }

    if(neg)
    {
        total = -1 * total;
    }

    return total;
}

fun maxexpressionaddingparen(chararray)
{
    var numbers = [];
    var operators = [];
    var current_number = [];

    var pos = 0;
    while(pos < len(chararray))
    {
        var ch = chararray[pos];

        if((ch == "+") or (ch == "-"))
        {
            if(len(current_number) > 0)
            {
                push(numbers, str_to_int(current_number));
                push(operators, ch);
                current_number = [];
            }
            else
            {
                if(ch == "-")
                {
                    push(current_number, "-");
                }
            }
        }
        else
        {
            push(current_number, ch);
        }

        pos = pos + 1;
    }

    if(len(current_number) > 0)
    {
        push(numbers, str_to_int(current_number));
    }

    var count = len(numbers);
    var max_table = [];
    var min_table = [];

    var a = 0;
    while(a < count)
    {
        var row_max = [];
        var row_min = [];
        var b = 0;

        while(b < count)
        {
            push(row_max, 0);
            push(row_min, 0);
            b = b + 1;
        }

        push(max_table, row_max);
        push(min_table, row_min);
        a = a + 1;
    }

    var t = 0;
    while(t < count)
    {
        max_table[t][t] = numbers[t];
        min_table[t][t] = numbers[t];
        t = t + 1;
    }

    var sub_len = 2;
    while(sub_len <= count)
    {
        var start = 0;
        while(start <= count - sub_len)
        {
            var end = start + sub_len - 1;
            max_table[start][end] = -9999999;
            min_table[start][end] = 9999999;

            var split = start;
            while(split < end)
            {
                var op = operators[split];
                var left_max = max_table[start][split];
                var left_min = min_table[start][split];
                var right_max = max_table[split + 1][end];
                var right_min = min_table[split + 1][end];

                var max_val = 0;
                var min_val = 0;

                if(op == "+")
                {
                    max_val = left_max + right_max;
                    min_val = left_min + right_min;
                }
                else
                {
                    // restricted subtraction
                    max_val = left_max - right_max;
                    min_val = left_min - right_min;
                }

                if(max_val > max_table[start][end])
                {
                    max_table[start][end] = max_val;
                }

                if(min_val < min_table[start][end])
                {
                    min_table[start][end] = min_val;
                }

                split = split + 1;
            }

            start = start + 1;
        }

        sub_len = sub_len + 1;
    }

    return max_table[0][count - 1];
}

fun main()
{
    print("input expression: 1+3-2-5+1-6+7");

    var chararray = ["1", "+", "3", "-", "2", "-", "5", "+", "1", "-", "6", "+", "7"];

    var result = maxexpressionaddingparen(chararray);

    printf("max possible value = %d\n", result);
}

main();