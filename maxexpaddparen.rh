// Maximum expression by adding parentheses (Dynamic Programming)

fun maxexpressionaddingparen(expression) {
    // Step 1: Normalize input
    expression = trim(expression);
    expression = replace(expression, " ", "");
    expression = replace(expression, "âˆ’", "-");

    var numbers = [];
    var operators = [];
    var num = "";

    // Parse numbers and operators correctly
    for (var idx = 0; idx < len(expression); idx = idx + 1) {
        var ch = expression[idx];
        if (ch == "+" || ch == "-") {
            if (num != "") {
                append(numbers, to_int(num));
                append(operators, ch);
                num = "";
            } else {
                if (ch == "-") {
                    num = "-";
                }
            }
        } else {
            num = num + ch;
        }
    }
    if (num != "") {
        append(numbers, to_int(num));
    }

    var n = len(numbers);

    // Step 2: Initialize DP tables
    var dp_max = [];
    var dp_min = [];
    for (var i = 0; i < n; i = i + 1) {
        var max_row = [];
        var min_row = [];
        for (var j = 0; j < n; j = j + 1) {
            append(max_row, 0);
            append(min_row, 0);
        }
        append(dp_max, max_row);
        append(dp_min, min_row);
    }

    // Step 3: Base case
    for (var i = 0; i < n; i = i + 1) {
        dp_max[i][i] = numbers[i];
        dp_min[i][i] = numbers[i];
    }

    // Step 4: Fill DP tables
    for (var length = 2; length <= n; length = length + 1) {
        for (var i = 0; i <= n - length; i = i + 1) {
            var j = i + length - 1;
            dp_max[i][j] = -INF;
            dp_min[i][j] = INF;

            for (var k = i; k < j; k = k + 1) {
                var op = operators[k];
                var left_max = dp_max[i][k];
                var left_min = dp_min[i][k];
                var right_max = dp_max[k + 1][j];
                var right_min = dp_min[k + 1][j];

                var max_val;
                var min_val;

                if (op == "+") {
                    max_val = left_max + right_max;
                    min_val = left_min + right_min;
                } else {
                    // restricted subtraction
                    max_val = left_max - right_max;
                    min_val = left_min - right_min;
                }

                if (max_val > dp_max[i][j]) {
                    dp_max[i][j] = max_val;
                }
                if (min_val < dp_min[i][j]) {
                    dp_min[i][j] = min_val;
                }
            }
        }
    }

    return dp_max[0][n - 1];
}

fun main() {
    // Hardcoded input expression for testing
    var expression_input = "1+3-2-5+1-6+7";

    // Display input
    print "input expression: ", expression_input;

    // Compute the maximum possible value using the algorithm
    var result = maxexpressionaddingparen(expression_input);

    // Display output
    print "max possible value: ", result;
}

main();