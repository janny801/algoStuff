
fun findLocalMin(array, arraysize)
{
    //step 1; find initial values for high and low 
    var low = 1; 
    var high = arraysize-2; 

    //step 2; find initial value for mid 
    var mid = (low+high)/2; 
    
    //step 3; check values left and right of mid 
    while(low<= high)
    {
        //udpate mid each iteration 
        mid = (low+high)/2; 

        //get values for neighbors and mid 
        var leftNeighbor = array[mid-1]; 
        var midValue = array[mid]; 
        var rightNeighbor = array[mid+1]; 

        //check if mid is a local minima
        if((midValue<=leftNeighbor) and (midValue<=rightNeighbor))
        {
            //midValue less than both neighbors
            return mid; 
        }
        else if(leftNeighbor<midValue)
        {
            //check left side of array
            high = mid -1; 
        }
        else
        {
            low = mid+1; 
        }

    }
    
    //needed this for cpp compilation incase it reaches here 
    return -1; 
}




//main function 
fun main()
{

    var arr = [9, 7, 7, 2, 1, 3, 7, 5, 4, 7, 3, 3, 4, 8, 6, 9];

    // get size of array 
    var arraysize = len(arr); 

    //call the func 
    var localMinIndex = findLocalMin(arr,arraysize); 

    //print the result 
    if(localMinIndex==-1)
    {
        print("no local minima found"); 
    }
    else
    {
        print("One of the local minima is located at..."); 
        printf("Index: %d\n", localMinIndex);
        printf("Value: %d\n", arr[localMinIndex]);
    }


}

//entrypoint for compilation lol i always forget
main(); 